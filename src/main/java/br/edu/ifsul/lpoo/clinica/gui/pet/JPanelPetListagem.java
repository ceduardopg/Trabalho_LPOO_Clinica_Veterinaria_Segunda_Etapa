/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.edu.ifsul.lpoo.clinica.gui.pet;

import br.edu.ifsul.lpoo.clinica.Controle;
import br.edu.ifsul.lpoo.clinica.model.Pet;
import java.text.SimpleDateFormat;
import javax.swing.table.DefaultTableModel;
import java.util.List;
import java.util.Vector;
import javax.swing.JOptionPane;

/**
 *
 * @author Carlos
 */
public class JPanelPetListagem extends javax.swing.JPanel {

    private JPanelPet pnlPet;
    private Controle controle;
    private SimpleDateFormat format;
    
    public JPanelPetListagem(JPanelPet pnlPet, Controle controle) {
        this.pnlPet = pnlPet;
        this.controle = controle;
        initComponents();
        format = new SimpleDateFormat("dd/MM/yyyy");
    }
    
    public void populaTable(){
        
        DefaultTableModel model =  (DefaultTableModel) tblListagem.getModel();//recuperacao do modelo da tabela

        model.setRowCount(0);//elimina as linhas existentes (reset na tabela)

        try {

            List<Pet> listPet = controle.getConexaoJDBC().listPet();
            for(Pet p : listPet){
                                
                model.addRow(new Object[]{p, p.getObservacao(), format.format(p.getData_nascimento().getTime()), 
                      p.getCliente().getNome(), p.getRaca().getNome(), p.getId()});
            }

        } catch (Exception ex) {

            JOptionPane.showMessageDialog(this, "Erro ao listar pets -:"+ex.getLocalizedMessage(), "Pets", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }        
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlNorte = new javax.swing.JPanel();
        lblFiltrarObs = new javax.swing.JLabel();
        txfFiltrarObs = new javax.swing.JTextField();
        btnFiltrar = new javax.swing.JButton();
        pnlCentro = new javax.swing.JPanel();
        scpRolagem = new javax.swing.JScrollPane();
        tblListagem = new javax.swing.JTable();
        pnlSul = new javax.swing.JPanel();
        btnNovo = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnRemover = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        lblFiltrarObs.setText("Filtrar por observação:");
        pnlNorte.add(lblFiltrarObs);

        txfFiltrarObs.setColumns(20);
        pnlNorte.add(txfFiltrarObs);

        btnFiltrar.setText("Filtrar");
        pnlNorte.add(btnFiltrar);

        add(pnlNorte, java.awt.BorderLayout.PAGE_START);

        pnlCentro.setLayout(new java.awt.BorderLayout());

        tblListagem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome", "Observação", "Data de Nascimento", "Cliente", "Raça", "ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scpRolagem.setViewportView(tblListagem);

        pnlCentro.add(scpRolagem, java.awt.BorderLayout.CENTER);

        add(pnlCentro, java.awt.BorderLayout.CENTER);

        btnNovo.setText("Novo");
        btnNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovoActionPerformed(evt);
            }
        });
        pnlSul.add(btnNovo);

        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });
        pnlSul.add(btnEditar);

        btnRemover.setText("Remover");
        btnRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverActionPerformed(evt);
            }
        });
        pnlSul.add(btnRemover);

        add(pnlSul, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void btnNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovoActionPerformed
        pnlPet.showTela("tela_pet_formulario");
        pnlPet.getFormulario().setPet(null);
    }//GEN-LAST:event_btnNovoActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        int indice = tblListagem.getSelectedRow();//recupera a linha selecionada
        if (indice > -1) {

            DefaultTableModel model = (DefaultTableModel) tblListagem.getModel(); //recuperacao do modelo da table

            Vector linha = (Vector) model.getDataVector().get(indice);//recupera o vetor de dados da linha selecionada

            Pet p = (Pet) linha.get(0);

            pnlPet.showTela("tela_pet_formulario");
            pnlPet.getFormulario().setPet(p);

        } else {
            JOptionPane.showMessageDialog(this, "Selecione uma linha para editar!", "Edição", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverActionPerformed
        int indice = tblListagem.getSelectedRow();//recupera a linha selecionada
        if (indice > -1) {

            DefaultTableModel model = (DefaultTableModel) tblListagem.getModel(); //recuperacao do modelo da table

            Vector linha = (Vector) model.getDataVector().get(indice);//recupera o vetor de dados da linha selecionada

            Pet p = (Pet) linha.get(0);
            
            try {
                    pnlPet.getControle().getConexaoJDBC().remover(p);
                    JOptionPane.showMessageDialog(this, "Pet removido!", "Pet", JOptionPane.INFORMATION_MESSAGE);
                    populaTable(); //refresh na tabela

                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "Erro ao remover pet -:"+ex.getLocalizedMessage(), "Pet", JOptionPane.ERROR_MESSAGE);
                    ex.printStackTrace();
                }     

        } else {
            JOptionPane.showMessageDialog(this, "Selecione uma linha para remover!", "Remoção", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnRemoverActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnFiltrar;
    private javax.swing.JButton btnNovo;
    private javax.swing.JButton btnRemover;
    private javax.swing.JLabel lblFiltrarObs;
    private javax.swing.JPanel pnlCentro;
    private javax.swing.JPanel pnlNorte;
    private javax.swing.JPanel pnlSul;
    private javax.swing.JScrollPane scpRolagem;
    private javax.swing.JTable tblListagem;
    private javax.swing.JTextField txfFiltrarObs;
    // End of variables declaration//GEN-END:variables
}
